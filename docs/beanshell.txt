import jscl.math.Generic;
static import jscl.math.Predef.*;

manager = new javax.script.ScriptEngineManager();
engine = manager.getEngineByName("jscl");
importObject(engine);

x = variable("x");
y = variable("y");

assert(eval("groebner({x^2 + y^2 - 4, x*y - 1}, {x, y})")
.equals(<math><vector><apply><plus/><apply><minus/><cn>1</cn><apply><times/><cn>4</cn><apply><power/><ci>x</ci><cn>2</cn></apply></apply></apply><apply><power/><ci>x</ci><cn>4</cn></apply></apply><apply><minus/><apply><minus/><apply><times/><cn>4</cn><ci>x</ci></apply><apply><power/><ci>x</ci><cn>3</cn></apply></apply><ci>y</ci></apply></vector></math>));

a = matrix("a", 2);
b = vector("b", 2);
x = vector("x", 2);

assert(eval("matrix({{a[0][0], a[0][1]},"+
                    "{a[1][0], a[1][1]}}, {x[0],"+
                                          "x[1]})-{b[0],"+
                                                  "b[1]}")
.equals(<math><vector><apply><plus/><apply><plus/><apply><minus/><ci><msub><mi>b</mi><mrow><cn>0</cn></mrow></msub></ci></apply><apply><times/><ci><msub><mi>a</mi><mrow><cn>0</cn><cn>0</cn></mrow></msub></ci><ci><msub><mi>x</mi><mrow><cn>0</cn></mrow></msub></ci></apply></apply><apply><times/><ci><msub><mi>a</mi><mrow><cn>0</cn><cn>1</cn></mrow></msub></ci><ci><msub><mi>x</mi><mrow><cn>1</cn></mrow></msub></ci></apply></apply><apply><plus/><apply><plus/><apply><minus/><ci><msub><mi>b</mi><mrow><cn>1</cn></mrow></msub></ci></apply><apply><times/><ci><msub><mi>a</mi><mrow><cn>1</cn><cn>0</cn></mrow></msub></ci><ci><msub><mi>x</mi><mrow><cn>0</cn></mrow></msub></ci></apply></apply><apply><times/><ci><msub><mi>a</mi><mrow><cn>1</cn><cn>1</cn></mrow></msub></ci><ci><msub><mi>x</mi><mrow><cn>1</cn></mrow></msub></ci></apply></apply></vector></math>));

a = variable("a");
b = variable("b");
c = variable("c");
x = variable("x");

assert(eval("solve(c+b*x+a*x^2,x)")
.equals(<math><apply><ci><msub><mi>root</mi><mrow><cn>0</cn></mrow></msub></ci><ci>c</ci><ci>b</ci><ci>a</ci></apply></math>));

assert(eval("subst(1/x^2,x,a)")
.equals(<math><apply><divide/><cn>1</cn><apply><power/><ci>a</ci><cn>2</cn></apply></apply></math>));

assert(eval("simplify(exp(sqrt(-1)*pi))")
.equals(<math><cn>-1</cn></math>));

assert(eval("simplify(elementary(cos(x)^2+sin(x)^2))")
.equals(<math><cn>1</cn></math>));

assert(eval("numeric(exp(1))")
.equals(<math><cn type="real">2.718281828459045</cn></math>));

f = function("f", 0);
f_ = function("f", 1);

assert(eval("d(cos(f(x)),x)")
.equals(<math><apply><minus/><apply><times/><apply><ci><mrow><mi>f</mi><mo>â€²</mo></mrow></ci><ci>x</ci></apply><apply><sin/><apply><ci>f</ci><ci>x</ci></apply></apply></apply></apply></math>));

assert(eval("curl(grad(f(x,y,z),{x,y,z}),{x,y,z})")
.equals(<math><vector><cn>0</cn><cn>0</cn><cn>0</cn></vector></math>));

assert(eval("sum(d(exp(x),x,0,i)/i!*(x-0)^i,i,0,4)")
.equals(<math><apply><plus/><apply><plus/><apply><plus/><apply><plus/><cn>1</cn><ci>x</ci></apply><apply><times/><apply><divide/><cn>1</cn><cn>2</cn></apply><apply><power/><ci>x</ci><cn>2</cn></apply></apply></apply><apply><times/><apply><divide/><cn>1</cn><cn>6</cn></apply><apply><power/><ci>x</ci><cn>3</cn></apply></apply></apply><apply><times/><apply><divide/><cn>1</cn><cn>24</cn></apply><apply><power/><ci>x</ci><cn>4</cn></apply></apply></apply></math>));

assert(eval("integral(1/(1+x^2),x)")
.equals(<math><apply><plus/><apply><times/><apply><ci><msub><mi>root</mi><mrow><cn>0</cn></mrow></msub></ci><cn>1</cn><cn>0</cn><cn>4</cn></apply><apply><ln/><apply><minus/><cn>1</cn><apply><times/><cn>2</cn><apply><times/><ci>x</ci><apply><ci><msub><mi>root</mi><mrow><cn>0</cn></mrow></msub></ci><cn>1</cn><cn>0</cn><cn>4</cn></apply></apply></apply></apply></apply></apply><apply><times/><apply><ci><msub><mi>root</mi><mrow><cn>1</cn></mrow></msub></ci><cn>1</cn><cn>0</cn><cn>4</cn></apply><apply><ln/><apply><minus/><cn>1</cn><apply><times/><cn>2</cn><apply><times/><ci>x</ci><apply><ci><msub><mi>root</mi><mrow><cn>1</cn></mrow></msub></ci><cn>1</cn><cn>0</cn><cn>4</cn></apply></apply></apply></apply></apply></apply></apply></math>));

assert(eval("quote(integral(1/(1+x^2),x))")
.equals(<math><apply><int/><bvar><ci>x</ci></bvar><apply><divide/><cn>1</cn><apply><plus/><cn>1</cn><apply><power/><ci>x</ci><cn>2</cn></apply></apply></apply></apply></math>));

man = variable("man");
mortal = variable("mortal");
sokrates = variable("sokrates");

assert(eval("groebner({sokrates*(1+man), man*(1+mortal)}, {man, mortal, sokrates}, lex, 2)")
.equals(<math><vector><apply><plus/><ci>man</ci><apply><times/><ci>man</ci><ci>mortal</ci></apply></apply><apply><plus/><ci>sokrates</ci><apply><times/><ci>man</ci><ci>sokrates</ci></apply></apply><apply><plus/><ci>sokrates</ci><apply><times/><ci>mortal</ci><ci>sokrates</ci></apply></apply></vector></math>));

assert(eval("factorize(sokrates+mortal*sokrates)").expand()
.equals(<math><apply><times/><ci>sokrates</ci><apply><plus/><cn>1</cn><ci>mortal</ci></apply></apply></math>));
