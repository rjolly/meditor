import scas.base.{<math><integers/></math>, <math><rationals/></math>}
import scas.module.{Array, ArrayModule}
import <math><integers/></math>.given
import <math><rationals/></math>.given

val s = ArrayModule(<math><rationals/></math>)(<math><cn>2</cn></math>)
val e = s.generators
import s.given

assert (<math><vector><cn>1</cn><cn type="rational">1<sep/>2</cn></vector></math> >< e(0) + <math><cn type="rational">1<sep/>2</cn></math> *%e(1))
assert (<math><cn>2</cn></math> *%e(0) >< e(0)%* <math><cn>2</cn></math>)
assert (<math><cn type="rational">1<sep/>2</cn></math> *%e(0) >< e(0)%* (<math><cn type="rational">1<sep/>2</cn></math>))
assert (e(0) + e(1) >< e(0) + e(1))
assert ((<math><cn>2</cn></math> *%e(0) + e(1)).show == <math><vector><cn>2</cn><cn>1</cn></vector></math>.show)
assert ((<math><cn type="rational">1<sep/>2</cn></math> *%e(0) + e(1)).show == <math><vector><cn type="rational">1<sep/>2</cn><cn>1</cn></vector></math>.show)
assert (s.toString == <math><msup><rationals/><cn>2</cn></msup></math>.toString)
