import scas.base.conversion.<math><integers/></math>
import <math><integers/></math>.{abs, gcd, lcm, unary_-, given}

assert(BigInteger("1") + <math><cn>1</cn></math> >< <math><cn>1</cn></math> + BigInteger("1"))
assert(BigInteger("1") - BigInteger("1") >< <math><cn>0</cn></math>)
assert(BigInteger("2") \ 2 >< BigInteger("4"))
assert(BigInteger("2") \ 64 >< BigInteger("18446744073709551616"))
assert(BigInteger("2") \ BigInteger("2") >< <math><cn>4</cn></math>)
assert(BigInteger("2") \:BigInteger("2") >< <math><cn>4</cn></math>)
assert(BigInteger("2") \ 2 >< <math><cn>4</cn></math>)
assert(BigInteger("2") \:2 >< <math><cn>4</cn></math>)
assert(<math><cn>2</cn></math> \ BigInteger("2") >< <math><cn>4</cn></math>)
assert(<math><cn>2</cn></math> \:BigInteger("2") >< <math><cn>4</cn></math>)
assert(<math><cn>2</cn></math> \ 2 >< <math><cn>4</cn></math>)
assert(<math><cn>2</cn></math> \:2 >< <math><cn>4</cn></math>)
assert(<math><cn>2</cn></math> \:2 \:3 >< <math><cn>256</cn></math>)
assert((<math><cn>2</cn></math> \:2) \ 3 >< <math><cn>64</cn></math>)
assert(abs(<math><cn>-1</cn></math>) >< BigInteger("-1").abs)
assert(unary_-(<math><cn>-1</cn></math>) >< BigInteger("-1").unary_-)
assert(gcd(<math><cn>3</cn></math>, <math><cn>5</cn></math>) >< <math><cn>1</cn></math>)
assert(lcm(<math><cn>3</cn></math>, <math><cn>5</cn></math>) >< <math><cn>15</cn></math>)
assert(gcd(BigInteger("3"), BigInteger("5")) >< <math><cn>1</cn></math>)
assert(lcm(BigInteger("3"), BigInteger("5")) >< <math><cn>15</cn></math>)
