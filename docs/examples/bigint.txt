import scala.language.implicitConversions
import scas.{<math><integers/></math>, \:, int2bigInt}
import <math><integers/></math>.{+, abs, unary_-}

assert(BigInteger(1) + <math><cn>1</cn></math> >< <math><cn>1</cn></math> + BigInteger(1))
assert(BigInteger(1) - BigInteger(1) >< <math><cn>0</cn></math>)
assert(BigInteger(2) \ 2 >< BigInteger(4))
assert(BigInteger(2) \ 64 >< BigInteger(18446744073709551616))
assert(BigInteger(2) \ 64 >< 18446744073709551616)
assert(BigInteger(2) \ 2 >< 4)
assert(<math><cn>2</cn></math> \:2 >< <math><cn>4</cn></math>)
assert(<math><cn>2</cn></math> \:2 \:3 >< <math><cn>256</cn></math>)
assert((<math><cn>2</cn></math> \:2) \ 3 >< <math><cn>64</cn></math>)
assert(abs(<math><cn>-1</cn></math>) >< <math><cn>-1</cn></math>.abs)
assert(unary_-(<math><cn>-1</cn></math>) >< <math><cn>-1</cn></math>.unary_-)
