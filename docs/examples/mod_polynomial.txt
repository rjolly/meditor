import scas.base.conversion.{BigInteger, ModInteger}
import scas.power.conversion.Lexicographic
import scas.polynomial.conversion.TreePolynomial
import BigInteger.int2bigInt
import scas.base.<math><integers/></math>

val s = ModInteger(2)
import s.residue

val r = new TreePolynomial(using <math><msub><integers/><cn>2</cn></msub></math>, Lexicographic[Int]("<math><ci>x</ci></math>"))
val <math><list><ci>x</ci></list></math> = r.generators.toList
import r.given

assert(<math><cn>1</cn></math> + <math><ci>x</ci></math> + <math><cn>1</cn></math> >< <math><ci>x</ci></math>)
assert(r.toString == <math><apply><msub><integers/><cn>2</cn></msub><list><ci>x</ci></list></apply></math>.toString)
assert(r.math == <math><apply><msub><integers/><cn>2</cn></msub><list><ci>x</ci></list></apply></math>.math)
