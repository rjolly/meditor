import scas.base.{<math><integers/></math>, <math><rationals/></math>}
import scas.quotient.RationalFunction
import <math><integers/></math>.given
import <math><rationals/></math>.given

val q = RationalFunction(<math><rationals/></math>)("<math><ci>x</ci></math>")
val <math><list><ci>x</ci></list></math> = q.generators
import q.{instance, coef2poly, ring2quotient}

assert (<math><ci>x</ci></math> + <math><cn type="rational">1<sep/>2</cn></math> >< <math><cn type="rational">1<sep/>2</cn></math> + <math><ci>x</ci></math>)
assert (<math><ci>x</ci></math> + <math><cn>1</cn></math> >< <math><cn>1</cn></math> + <math><ci>x</ci></math>)
assert ((<math><apply><power/><ci>x</ci><cn>2</cn></apply></math>-<math><cn>1</cn></math>)/(<math><ci>x</ci></math>-<math><cn>1</cn></math>) >< <math><ci>x</ci></math>+<math><cn>1</cn></math>)
assert ((<math><apply><minus/><cn>1</cn><apply><power/><ci>x</ci><cn>2</cn></apply></apply></math>)/(<math><apply><minus/><cn>1</cn><ci>x</ci></apply></math>) >< <math><apply><plus/><cn>1</cn><ci>x</ci></apply></math>)
assert (<math><ci>x</ci></math> / <math><cn>2</cn></math> >< <math><apply><times/><cn type="rational">1<sep/>2</cn><ci>x</ci></apply></math>)
