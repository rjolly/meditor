import scas.power.Lexicographic
import scas.variable.Variable

given m as Lexicographic[Int]((for (i <- 0 until 4; j <- 0 until 2) yield Variable("a", Array(i, j): _*)): _*)
val a = m.generators.grouped(2).toArray
val s = (for (i <- 0 until 4; j <- 0 until 2) yield a(i)(j)).toArray
assert (s.show.toList == List(<math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>0</mn>, <mn>0</mn>)</mrow></msub></ci></math>.show, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>0</mn>, <mn>1</mn>)</mrow></msub></ci></math>.show, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>1</mn>, <mn>0</mn>)</mrow></msub></ci></math>.show, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>1</mn>, <mn>1</mn>)</mrow></msub></ci></math>.show, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>2</mn>, <mn>0</mn>)</mrow></msub></ci></math>.show, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>2</mn>, <mn>1</mn>)</mrow></msub></ci></math>.show, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>3</mn>, <mn>0</mn>)</mrow></msub></ci></math>.show, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>3</mn>, <mn>1</mn>)</mrow></msub></ci></math>.show))
assert (s.math.toList == List(<math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>0</mn>, <mn>0</mn>)</mrow></msub></ci></math>.math, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>0</mn>, <mn>1</mn>)</mrow></msub></ci></math>.math, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>1</mn>, <mn>0</mn>)</mrow></msub></ci></math>.math, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>1</mn>, <mn>1</mn>)</mrow></msub></ci></math>.math, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>2</mn>, <mn>0</mn>)</mrow></msub></ci></math>.math, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>2</mn>, <mn>1</mn>)</mrow></msub></ci></math>.math, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>3</mn>, <mn>0</mn>)</mrow></msub></ci></math>.math, <math><ci><msub><mi>a</mi><mrow>ArraySeq(<mn>3</mn>, <mn>1</mn>)</mrow></msub></ci></math>.math))
