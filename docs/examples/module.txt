import scas.base.{<math><integers/></math>, <math><rationals/></math>}
import scas.power.Lexicographic
import scas.module.{Array, ArrayModule}
import scas.polynomial.tree.Polynomial
import <math><integers/></math>.given
import <math><rationals/></math>.Implicits.given

val r = Polynomial(using <math><rationals/></math>, Lexicographic.inlined(0)("<math><ci>x</ci></math>"))
val <math><list><ci>x</ci></list></math> = r.generators
import r.{instance, coef2poly}

val s = ArrayModule(<math><mrow><rationals/><mfenced open="[" close="]"><ci>x</ci></mfenced></mrow></math>)(<math><cn>2</cn></math>)
val e = s.generators
import s.instance

assert (<math><vector><cn>1</cn><cn type="rational">1<sep/>2</cn></vector></math> >< e(0) + <math><cn type="rational">1<sep/>2</cn></math> *%e(1))
assert (<math><vector><cn>1</cn><ci>x</ci></vector></math> >< e(0) + <math><ci>x</ci></math> *%e(1))
assert (<math><cn>2</cn></math> *%e(0) >< e(0)%* <math><cn>2</cn></math>)
assert (<math><cn type="rational">1<sep/>2</cn></math> *%e(0) >< e(0)%* (<math><cn type="rational">1<sep/>2</cn></math>))
assert (<math><ci>x</ci></math> *%e(0) >< e(0)%* <math><ci>x</ci></math>)
assert (<math><cn>2</cn></math> * <math><ci>x</ci></math> *%e(0) >< e(0)%* (<math><cn>2</cn></math> * <math><ci>x</ci></math>))
assert (<math><cn type="rational">1<sep/>2</cn></math> * <math><ci>x</ci></math> *%e(0) >< e(0)%* (<math><cn type="rational">1<sep/>2</cn></math> * <math><ci>x</ci></math>))
assert (e(0) + e(1) >< e(0) + e(1))
assert ((<math><cn>2</cn></math> *%e(0) + e(1)).toList == <math><vector><cn>2</cn><cn>1</cn></vector></math>.toList)
assert ((<math><cn type="rational">1<sep/>2</cn></math> *%e(0) + e(1)).toList == <math><vector><cn type="rational">1<sep/>2</cn><cn>1</cn></vector></math>.toList)
assert (s == <math><msup><mrow><rationals/><mfenced open="[" close="]"><ci>x</ci></mfenced></mrow><cn>2</cn></msup></math>)
