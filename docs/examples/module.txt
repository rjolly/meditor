import scas.base.conversion.{<math><integers/></math>, <math><rationals/></math>}
import scas.power.conversion.Lexicographic
import scas.module.conversion.{Array, ArrayModule}
import scas.polynomial.conversion.TreePolynomial
import <math><integers/></math>.int2bigInt
import <math><rationals/></math>.{ring2quotient, %%}

val r = new TreePolynomial(using <math><rationals/></math>, Lexicographic[Int]("<math><ci>x</ci></math>"))
val <math><list><ci>x</ci></list></math> = r.generators.toList
import r.given

val s = new ArrayModule(using <math><apply><rationals/><list><ci>x</ci></list></apply></math>)(2)
val e = s.generators
import s.given

assert (<math><vector><cn>1</cn><cn type="rational">1<sep/>2</cn></vector></math> >< e(0) + <math><cn type="rational">1<sep/>2</cn></math> *%e(1))
assert (<math><vector><cn>1</cn><ci>x</ci></vector></math> >< e(0) + <math><ci>x</ci></math> *%e(1))
assert (<math><cn>2</cn></math> *%e(0) >< e(0)%* <math><cn>2</cn></math>)
assert (<math><cn type="rational">1<sep/>2</cn></math> *%e(0) >< e(0)%* (<math><cn type="rational">1<sep/>2</cn></math>))
assert (<math><ci>x</ci></math> *%e(0) >< e(0)%* <math><ci>x</ci></math>)
assert (<math><cn>2</cn></math> * <math><ci>x</ci></math> *%e(0) >< e(0)%* (<math><cn>2</cn></math> * <math><ci>x</ci></math>))
assert (<math><cn type="rational">1<sep/>2</cn></math> * <math><ci>x</ci></math> *%e(0) >< e(0)%* (<math><cn type="rational">1<sep/>2</cn></math> * <math><ci>x</ci></math>))
assert (e(0) + e(1) >< e(0) + e(1))
assert ((<math><cn>2</cn></math> *%e(0) + e(1)).show == <math><vector><cn>2</cn><cn>1</cn></vector></math>.show)
assert ((<math><cn type="rational">1<sep/>2</cn></math> *%e(0) + e(1)).show == <math><vector><cn type="rational">1<sep/>2</cn><cn>1</cn></vector></math>.show)
assert (s.toString == <math><msup><apply><rationals/><list><ci>x</ci></list></apply><cn>2</cn></msup></math>.toString)
assert (s.math == <math><msup><apply><rationals/><list><ci>x</ci></list></apply><cn>2</cn></msup></math>.math)
