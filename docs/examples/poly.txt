import scas.base.<math><integers/></math>
import scas.power.Lexicographic
import scas.polynomial.tree.Polynomial
import <math><integers/></math>.given

val r = Polynomial(using <math><integers/></math>, Lexicographic.inlined(0)("<math><ci>x</ci></math>", "<math><ci>y</ci></math>", "<math><ci>z</ci></math>"))
val <math><list><ci>x</ci><ci>y</ci><ci>z</ci></list></math> = r.generators
import r.{instance, coef2poly}

assert(<math><ci>x</ci></math> + <math><cn>1</cn></math> >< <math><cn>1</cn></math> + <math><ci>x</ci></math>)
assert(<math><ci>x</ci></math> + BigInteger("1") >< BigInteger("1") + <math><ci>x</ci></math>)

val s = Polynomial(using <math><mrow><integers/><mfenced open="[" close="]"><ci>x</ci><ci>y</ci><ci>z</ci></mfenced></mrow></math>, Lexicographic.inlined(0)("<math><ci>a</ci></math>"))
val <math><list><ci>a</ci></list></math> = s.generators
import s.{instance, coef2poly}

assert(<math><ci>a</ci></math> + <math><cn>1</cn></math> >< <math><cn>1</cn></math> + <math><ci>a</ci></math>)
assert(<math><ci>a</ci></math> + BigInteger("<math><cn>1</cn></math>") >< BigInteger("<math><cn>1</cn></math>") + <math><ci>a</ci></math>)
assert(<math><ci>a</ci></math> + <math><ci>x</ci></math> >< <math><ci>x</ci></math> + <math><ci>a</ci></math>)
assert((<math><ci>a</ci></math> + <math><ci>x</ci></math>).show == "<math><apply><plus/><ci>x</ci><ci>a</ci></apply></math>")
